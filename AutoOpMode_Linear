/*
Copyright (c) 2016 Robert Atkinson

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted (subject to the limitations in the disclaimer below) provided that
the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

Neither the name of Robert Atkinson nor the names of his contributors may be used to
endorse or promote products derived from this software without specific prior
written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cRangeSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.UltrasonicSensor;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;
import com.qualcomm.robotcore.util.ElapsedTime;


@Autonomous(name = "AutoOpMode_Linear", group="Linear Opmode")
//@Disabled
public class AutoOpMode_Linear extends LinearOpMode {

    private ElapsedTime runtime = new ElapsedTime();

    //ROBOT ATTACHMENTS
    OpticalDistanceSensor distanceSensor;
    UltrasonicSensor ultrasonicSensor;
    LightSensor lightSensor;
    DcMotor leftMotor;
    DcMotor rightMotor;
    ColorSensor colorSensor;
    Servo servoArm;

    //VARIABLES
    static final double WHITE_THRESHOLD = 0.03;  // spans between 0.1 - 0.5 from dark to light
    static final double APPROACH_SPEED = 0.5;
    static final double DISTANCE = 30;    //unit: cm
    static final double MAX_POS = 1.0;

    //ENCODER VARIABLES
    static final double COUNTS_PER_MOTOR_REV = 1440;
    static final double DRIVE_GEAR_REDUCTION = 2.0;     // This is < 1.0 if geared UP
    static final double WHEEL_DIAMETER_INCHES = 4.0;
    static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double DRIVE_SPEED = 0.5;
    static final double DRIVE_SPEED_SLOW = 0.2;
    static final double TURN_SPEED = 0.5;


    @Override
    public void runOpMode() throws InterruptedException {

        telemetry.addData("Status", "Initialized");
        telemetry.update();

        //SENSORS
        colorSensor = hardwareMap.colorSensor.get("color_sensor");
        lightSensor = hardwareMap.opticalDistanceSensor.get("sensor_ods");
        lightSensor.enableLed(true);        //turn LED on
        ultrasonicSensor = hardwareMap.ultrasonicSensor.get("range_sensor");

        //SERVOS
        servoArm = hardwareMap.servo.get("arm");
        servoArm.setPosition(0.0); //Arm will reset to Position 0 when "INT" is hit.

        //ENCODERS
        leftMotor = hardwareMap.dcMotor.get("left_motor");
        rightMotor = hardwareMap.dcMotor.get("right_motor");
        leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        runtime.reset();
        waitForStart();

        if (opModeIsActive()) {
            //2. Find line and stop
            if (lightSensor.getLightDetected() < WHITE_THRESHOLD) {
                leftMotor.setPower(0);
                rightMotor.setPower(0);
            }

            //5. Identify color and press
            double r = colorSensor.red();

            if (r == 1)

            {
                servoArm.setPosition(MAX_POS);

                leftMotor.setPower(0);
                rightMotor.setPower(0);
                leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

                sleep(500);
            }

            idle();

            //CODE TO RUN TILL END OF AUTO MATCH
            while (opModeIsActive()) {
                telemetry.addData("Light Level", lightSensor.getLightDetected());
                telemetry.addData("Distance away from wall: ", ultrasonicSensor.getUltrasonicLevel());
                telemetry.addData("Status", "Run Time: " + runtime.toString());
                telemetry.addData("Status", "Run Time: " + runtime.toString());
                telemetry.addData("Red  ", colorSensor.red());
                telemetry.addData("Blue ", colorSensor.blue());
                telemetry.update();
            }
        }
    }
}






/*
IGNORE ----------------------------------------------------------------
Turn robot parallel to wall
If the distance from telemetry does not equal the distance needed {}

            String f = new String("53");
    boolean k = f.equals(telemetry.addData("Distance away from wall: ", ultrasonicSensor.getUltrasonicLevel())))

            while (true) {
                if (k == true) ;
                else if (!(ultrasonicSensor.equals(MORE_THAN_WALL))) {
                    //Turn right
                    leftMotor.setDirection(REVERSE);
                    rightMotor.setDirection(FORWARD);
                } else if (!(CURRENT_DISTANCE.equals(LESS_THAN_WALL))) {
                    //Turn right
                    leftMotor.setDirection(FORWARD);
                    rightMotor.setDirection(REVERSE);

                    idle();


                           //3. Follow line until x
                        while (lightSensor.getLightDetected() < WHITE_THRESHOLD) {
                            leftMotor.setDirection(FORWARD);
                            rightMotor.setDirection(REVERSE);
                            //is motors in approaching speed?
                        }

                        //4. self-adjust if necessary
                        while (!(DISTANCE <= distanceSensor.getRawLightDetected())) {
                            if (lightSensor.getLightDetected() < WHITE_THRESHOLD) {
                                rightMotor.setPower(0.3);
                                leftMotor.setPower(0);
                            } else {
                                leftMotor.setPower(0.3);
                                rightMotor.setPower(0);
                            }
                        }
*/

   /*
   double o = distanceSensor.getLightDetected();
            double g = ultrasonicSensor.getUltrasonicLevel();

            //if black is lower number change value
            while (o < 0.03) {
                if (g > 15) {
                    leftMotor.setPower(0.3);
                    rightMotor.setPower(0.2);
                } else {
                    leftMotor.setPower(0.02);
                    rightMotor.setPower(0.03);
                }

                sleep(1000);
   */
